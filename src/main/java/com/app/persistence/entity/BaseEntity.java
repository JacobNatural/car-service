package com.app.persistence.entity;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.*;
import lombok.experimental.SuperBuilder;
import org.hibernate.proxy.HibernateProxy;

import java.util.Objects;

/**
 * A base entity class that provides common fields and methods for entities.
 * This class serves as a parent class for all entities, ensuring that they have
 * an `id` field and overriding the `equals()` and `hashCode()` methods to provide
 * proper identity comparison based on the entity's `id`.
 *
 * The class is marked as `@MappedSuperclass`, indicating that it is not an entity
 * itself but provides a base for other entities.
 *
 * Subclasses will inherit the `id` field and have access to the overridden
 * `equals()` and `hashCode()` methods for comparing entity instances.
 */
@SuperBuilder
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@MappedSuperclass
public class BaseEntity {

    /**
     * The unique identifier for this entity.
     * The ID will be automatically generated by the persistence provider.
     */
    @Id
    @GeneratedValue
    protected Long id;

    /**
     * Compares this entity to another object based on their class and ID.
     * The comparison is made by checking the entity's ID field, which should be unique.
     *
     * @param o the object to compare this entity with
     * @return {@code true} if the entities are the same, {@code false} otherwise
     */
    @Override
    public final boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        Class<?> oEffectiveClass = o instanceof HibernateProxy ? ((HibernateProxy) o).getHibernateLazyInitializer().getPersistentClass() : o.getClass();
        Class<?> thisEffectiveClass = this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass() : this.getClass();
        if (thisEffectiveClass != oEffectiveClass) return false;
        BaseEntity that = (BaseEntity) o;
        return getId() != null && Objects.equals(getId(), that.getId());
    }

    /**
     * Returns a hash code for this entity based on its class and ID.
     * This ensures that entities with the same ID will have the same hash code.
     *
     * @return the hash code for this entity
     */
    @Override
    public final int hashCode() {
        return this instanceof HibernateProxy ? ((HibernateProxy) this).getHibernateLazyInitializer().getPersistentClass().hashCode() : getClass().hashCode();
    }
}
